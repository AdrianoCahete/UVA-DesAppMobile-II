<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/dev/adrianocahete/mediacalc/MainActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/dev/adrianocahete/mediacalc/MainActivity.java" />
              <option name="originalContent" value="package dev.adrianocahete.mediacalc;&#10;&#10;import android.os.Bundle;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;&#10;public class MainActivity extends AppCompatActivity {&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_main);&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;    }&#10;}" />
              <option name="updatedContent" value="package dev.adrianocahete.mediacalc;&#10;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;&#10;public class MainActivity extends AppCompatActivity {&#10;&#10;    private EditText editTextA1, editTextA2, editTextA3;&#10;    private TextView textViewResult, textViewApproved;&#10;    private Button buttonCalculate;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_main);&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;&#10;        initializeViews();&#10;        setupCalculateButton();&#10;    }&#10;&#10;    private void initializeViews() {&#10;        editTextA1 = findViewById(R.id.editTextA1);&#10;        editTextA2 = findViewById(R.id.editTextA2);&#10;        editTextA3 = findViewById(R.id.editTextA3);&#10;        textViewResult = findViewById(R.id.textViewResult);&#10;        textViewApproved = findViewById(R.id.textViewApproved);&#10;        buttonCalculate = findViewById(R.id.buttonCalculate);&#10;    }&#10;&#10;    private void setupCalculateButton() {&#10;        buttonCalculate.setOnClickListener(v -&gt; calculateNFp());&#10;    }&#10;&#10;    private void calculateNFp() {&#10;        // Get A1 value (required)&#10;        String a1Text = editTextA1.getText().toString().trim().replace(&quot;,&quot;, &quot;.&quot;);&#10;        if (TextUtils.isEmpty(a1Text)) {&#10;            Toast.makeText(this, &quot;A1 é obrigatório!&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        double a1;&#10;        try {&#10;            a1 = Double.parseDouble(a1Text);&#10;            if (a1 &lt; 0 || a1 &gt; 10) {&#10;                Toast.makeText(this, &quot;A1 deve estar entre 0 e 10!&quot;, Toast.LENGTH_SHORT).show();&#10;                return;&#10;            }&#10;        } catch (NumberFormatException e) {&#10;            Toast.makeText(this, &quot;A1 deve ser um número válido!&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        // Get A2 and A3 values&#10;        String a2Text = editTextA2.getText().toString().trim().replace(&quot;,&quot;, &quot;.&quot;);&#10;        String a3Text = editTextA3.getText().toString().trim().replace(&quot;,&quot;, &quot;.&quot;);&#10;&#10;        // Check if at least A2 or A3 is provided&#10;        if (TextUtils.isEmpty(a2Text) &amp;&amp; TextUtils.isEmpty(a3Text)) {&#10;            Toast.makeText(this, &quot;É necessário preencher A2 ou A3!&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        double a2 = 0, a3 = 0;&#10;        boolean hasA2 = false, hasA3 = false;&#10;&#10;        // Parse A2 if provided&#10;        if (!TextUtils.isEmpty(a2Text)) {&#10;            try {&#10;                a2 = Double.parseDouble(a2Text);&#10;                if (a2 &lt; 0 || a2 &gt; 10) {&#10;                    Toast.makeText(this, &quot;A2 deve estar entre 0 e 10!&quot;, Toast.LENGTH_SHORT).show();&#10;                    return;&#10;                }&#10;                hasA2 = true;&#10;            } catch (NumberFormatException e) {&#10;                Toast.makeText(this, &quot;A2 deve ser um número válido!&quot;, Toast.LENGTH_SHORT).show();&#10;                return;&#10;            }&#10;        }&#10;&#10;        // Parse A3 if provided&#10;        if (!TextUtils.isEmpty(a3Text)) {&#10;            try {&#10;                a3 = Double.parseDouble(a3Text);&#10;                if (a3 &lt; 0 || a3 &gt; 10) {&#10;                    Toast.makeText(this, &quot;A3 deve estar entre 0 e 10!&quot;, Toast.LENGTH_SHORT).show();&#10;                    return;&#10;                }&#10;                hasA3 = true;&#10;            } catch (NumberFormatException e) {&#10;                Toast.makeText(this, &quot;A3 deve ser um número válido!&quot;, Toast.LENGTH_SHORT).show();&#10;                return;&#10;            }&#10;        }&#10;&#10;        // Use the higher value between A2 and A3&#10;        double a2OrA3;&#10;        if (hasA2 &amp;&amp; hasA3) {&#10;            a2OrA3 = Math.max(a2, a3);&#10;        } else if (hasA2) {&#10;            a2OrA3 = a2;&#10;        } else {&#10;            a2OrA3 = a3;&#10;        }&#10;&#10;        // Calculate NFp according to the formula&#10;        double nfp;&#10;        boolean isApproved;&#10;&#10;        // Check conditions for calculation formula&#10;        if (a1 &gt; 0.0 &amp;&amp; a2OrA3 &gt;= 5.0) {&#10;            // A1 &gt; 0 and (A2 or A3) &gt;= 5: NFp = (A1 x 0.4) + (A2 or A3 x 0.6)&#10;            nfp = (a1 * 0.4) + (a2OrA3 * 0.6);&#10;        } else {&#10;            // A1 = 0 and/or (A2 and A3) &lt; 5: NFp = (A1 x 0.4) + (A2 or A3 x 0.6)/2&#10;            nfp = (a1 * 0.4) + ((a2OrA3 * 0.6) / 2);&#10;        }&#10;&#10;        // Determine if approved&#10;        // If A1 is zero, automatically failed&#10;        if (a1 == 0.0) {&#10;            isApproved = false;&#10;        } else {&#10;            isApproved = nfp &gt;= 6.0;&#10;        }&#10;&#10;        // Display results&#10;        textViewResult.setText(String.format(&quot;%.2f&quot;, nfp));&#10;        &#10;        if (isApproved) {&#10;            textViewApproved.setText(&quot;Aprovado&quot;);&#10;            textViewApproved.setTextColor(getResources().getColor(android.R.color.holo_green_dark));&#10;        } else {&#10;            textViewApproved.setText(&quot;Reprovado&quot;);&#10;            textViewApproved.setTextColor(getResources().getColor(android.R.color.holo_red_dark));&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>